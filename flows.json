[
    {
        "id": "bd23afa2.3f751",
        "type": "tab",
        "label": "Configuration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cfc118ef.6ec4b8",
        "type": "tab",
        "label": "UI",
        "disabled": false,
        "info": ""
    },
    {
        "id": "63d8f1ba.cdaab",
        "type": "tab",
        "label": "1.2_To read",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2425c728.063d68",
        "type": "tab",
        "label": "1.2_Read Modbus",
        "disabled": false,
        "info": ""
    },
    {
        "id": "166c9413.bd75bc",
        "type": "tab",
        "label": "1.2_Special reads",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a68312fe.fc5a8",
        "type": "tab",
        "label": "1.2_Digital Inputs",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1996f926.c36f07",
        "type": "tab",
        "label": "1.2_MQTT Handling",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8d494dac.9cfcb",
        "type": "tab",
        "label": "1.2_HTTP request to enectiva",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9a0cdbf9.75f828",
        "type": "tab",
        "label": "[custom] plot office conditons",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1997b6f4.3b6919",
        "type": "tab",
        "label": "Weather API",
        "disabled": true,
        "info": ""
    },
    {
        "id": "e3afc424.b02108",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "mqtt.flespi.io",
        "port": "8883",
        "tls": "37956b33.3e6704",
        "clientid": "enectiva/unipi/0014",
        "usetls": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "devices/unipi/0014/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "connected",
        "closeTopic": "devices/unipi/0014/status",
        "closeQos": "0",
        "closeRetain": "true",
        "closePayload": "disconnected (exp)",
        "willTopic": "devices/unipi/0014/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "disconnected (unexp)"
    },
    {
        "id": "3a2c413.d59abbe",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "87806a73.b33908",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#1395c6",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#1395c6",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#1395c6",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#39bbec",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#1395c6",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1750ed1.acf9a13",
        "type": "modbus-client",
        "z": "",
        "name": "RS485",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/extcomm/0/0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "500",
        "unit_id": 2,
        "commandDelay": 20,
        "clientTimeout": 1000,
        "reconnectTimeout": 2000
    },
    {
        "id": "1eddd28.1e0422e",
        "type": "ui_group",
        "z": "",
        "name": "Read",
        "tab": "3a2c413.d59abbe",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "3500af83.13cf3",
        "type": "ui_group",
        "z": "",
        "name": "System",
        "tab": "3a2c413.d59abbe",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "37956b33.3e6704",
        "type": "tls-config",
        "z": "",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true
    },
    {
        "id": "715da2c7.10cd0c",
        "type": "protobuf-file",
        "z": "",
        "protopath": "/home/pi/librarian_protobuf.proto"
    },
    {
        "id": "99bb737d.29857",
        "type": "modbus-client",
        "z": "",
        "name": "TCP Localhost",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectTimeout": "2000"
    },
    {
        "id": "a9d5131d.f380f",
        "type": "ui_tab",
        "z": "",
        "name": "Charts",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "501367b7.f58d18",
        "type": "ui_group",
        "z": "",
        "name": "Office",
        "tab": "a9d5131d.f380f",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "24fa8b95.62d814",
        "type": "modbus-client",
        "z": "",
        "name": "TCP_Mervis",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "10.10.8.165",
        "tcpPort": "509",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectTimeout": 2000
    },
    {
        "id": "8c733cd6.89e0b",
        "type": "modbus-client",
        "z": "",
        "name": "jakub_pc",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "10.10.8.167",
        "tcpPort": "503",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectTimeout": "2000"
    },
    {
        "id": "f7f7901c.fe027",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.data.sn",
        "x": 600,
        "y": 260,
        "wires": []
    },
    {
        "id": "31a9e540.0648ba",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Get UniPI SN",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 180,
        "y": 200,
        "wires": [
            [
                "fc67f786.751518"
            ]
        ]
    },
    {
        "id": "fc67f786.751518",
        "type": "http request",
        "z": "bd23afa2.3f751",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "127.0.0.1:8080/json/neuron/1",
        "tls": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "3963da2b.d24606",
                "f7f7901c.fe027"
            ]
        ]
    },
    {
        "id": "d9a916d3.c4ff38",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Get UniPi's SN",
        "info": "",
        "x": 160,
        "y": 160,
        "wires": []
    },
    {
        "id": "581d29ba.2afcb8",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Set 1",
        "topic": "",
        "payload": "{\"led\":\"2\",\"value\":\"1\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 480,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "d6a3cf08.5484f",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Set 0",
        "topic": "",
        "payload": "{\"led\":\"2\",\"value\":\"0\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 520,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "5c4d44b.813ecbc",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Set UniPi's output LEDs { led:X, value:Y}",
        "info": "",
        "x": 240,
        "y": 440,
        "wires": []
    },
    {
        "id": "60811137.437e2",
        "type": "inject",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 290,
        "y": 360,
        "wires": [
            [
                "4b8368d7.a9bc28",
                "9b11460.d8525b8",
                "146d9fca.b493d",
                "2e11fe48.9ad4e2",
                "9007928f.e39a1",
                "ac605a62.954c48",
                "d162d830.248a98",
                "7fe7cf4c.9b184",
                "39aaef07.8b2bd",
                "783b9f31.62dff"
            ]
        ]
    },
    {
        "id": "4b8368d7.a9bc28",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "unitid",
        "label": "Unit ID",
        "group": "1eddd28.1e0422e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "unitid",
        "x": 490,
        "y": 400,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "9b11460.d8525b8",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "address",
        "label": "Address (start register)",
        "group": "1eddd28.1e0422e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "address",
        "x": 500,
        "y": 440,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "146d9fca.b493d",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "quantity",
        "label": "Quantity (# of registers to read)",
        "group": "1eddd28.1e0422e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "quantity",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "2e11fe48.9ad4e2",
        "type": "ui_dropdown",
        "z": "cfc118ef.6ec4b8",
        "name": "fc",
        "label": "Function code",
        "place": "Select option",
        "group": "1eddd28.1e0422e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": 3,
                "type": "num"
            },
            {
                "label": "",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "fc",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "3d04116d.8823ce",
        "type": "function",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "func": "// if values don't exist, create it\ncontext.read_fc = context.read_fc || \"3\";\ncontext.read_unitid = context.read_unitid || \"1\";\ncontext.read_address = context.read_address || \"0\";\ncontext.read_quantity = context.read_quantity || \"2\";\ncontext.read_datatype = context.read_datatype || \"float\";\n\nif (msg.topic == \"fc\") {\n    context.read_fc = msg.payload;\n}\nelse if(msg.topic == \"unitid\") {\n    context.read_unitid = msg.payload;\n}\nelse if(msg.topic == \"address\") {\n    context.read_address = msg.payload;\n}\nelse if(msg.topic == \"quantity\") {\n    context.read_quantity = msg.payload;\n}\nelse if(msg.topic == \"datatype\") {\n    flow.set(\"read_datatype\", msg.payload);\n}\n\n\n    // 'datatype': context.read_datatype,\n\nmsg.payload = \n{ \n    'fc': context.read_fc, \n    'unitid': context.read_unitid, \n    'address': context.read_address, \n    'quantity': context.read_quantity,\n} \n\nif(msg.topic == \"trigger_read\") {\n    return msg;\n}\n//else if(msg.topic == \"trigger_write\") {\n//    return [ null, msg ];\n//}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "88a57114.4363b",
                "7b97008.8bcde",
                "49028de8.901b64"
            ]
        ],
        "outputLabels": [
            "Read"
        ]
    },
    {
        "id": "88a57114.4363b",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "9007928f.e39a1",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "1eddd28.1e0422e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Read",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "trigger_read",
        "x": 490,
        "y": 560,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "7b97008.8bcde",
        "type": "modbus-flex-getter",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "1750ed1.acf9a13",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 970,
        "y": 360,
        "wires": [
            [],
            [
                "2065d89f.28b758",
                "ba450648.a2bba8"
            ]
        ]
    },
    {
        "id": "2065d89f.28b758",
        "type": "function",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "func": "let val = 0;\ndatatype = flow.get(\"read_datatype\");\n\nif (datatype == \"int32\") {\n    val = msg.payload.buffer.readInt32BE(0,4);\n} else if (datatype == \"float\") {\n    val = msg.payload.buffer.readFloatBE(0,4);\n} else if (datatype == \"hex\") {\n    val = msg.payload.buffer.toString('hex');\n} else if (datatype == \"int16\") {\n    val = msg.payload.buffer.readInt16BE(0,2);\n}\n// let met = msg.input.payload.meterid;\n// let sui = msg.input.payload.address;\n\nmsg.payload = val;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "ceb3289d.4bbcb8",
                "f02349b.fa132b8"
            ]
        ]
    },
    {
        "id": "ceb3289d.4bbcb8",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "1eddd28.1e0422e",
        "order": 7,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "Value",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1370,
        "y": 360,
        "wires": []
    },
    {
        "id": "ffeaaca7.56a1",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "sudo shutdown -r now",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "",
        "x": 620,
        "y": 780,
        "wires": [
            [
                "efa0abe5.1909b8"
            ],
            [
                "36e23570.08098a"
            ],
            [
                "d48c43da.66175"
            ]
        ]
    },
    {
        "id": "2120aa24.a692c6",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Reboot",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "efa0abe5.1909b8",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 760,
        "wires": []
    },
    {
        "id": "36e23570.08098a",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 800,
        "wires": []
    },
    {
        "id": "d48c43da.66175",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 840,
        "wires": []
    },
    {
        "id": "ac605a62.954c48",
        "type": "ui_dropdown",
        "z": "cfc118ef.6ec4b8",
        "name": "datatype",
        "label": "Data type",
        "place": "Select option",
        "group": "1eddd28.1e0422e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "options": [
            {
                "label": "Int32 BE",
                "value": "int32",
                "type": "str"
            },
            {
                "label": "Float BE",
                "value": "float",
                "type": "str"
            },
            {
                "label": "Raw HEX",
                "value": "hex",
                "type": "str"
            },
            {
                "label": "Int16 BE",
                "value": "int16",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "datatype",
        "x": 500,
        "y": 520,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "ba450648.a2bba8",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1230,
        "y": 320,
        "wires": []
    },
    {
        "id": "f02349b.fa132b8",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1370,
        "y": 400,
        "wires": []
    },
    {
        "id": "49028de8.901b64",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "1eddd28.1e0422e",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Request",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 940,
        "y": 420,
        "wires": []
    },
    {
        "id": "d162d830.248a98",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "edef7ef3.37e3e"
            ]
        ]
    },
    {
        "id": "edef7ef3.37e3e",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Reboot",
        "links": [
            "c94c426f.5cd82"
        ],
        "x": 715,
        "y": 700,
        "wires": []
    },
    {
        "id": "c94c426f.5cd82",
        "type": "link in",
        "z": "bd23afa2.3f751",
        "name": "",
        "links": [
            "edef7ef3.37e3e"
        ],
        "x": 115,
        "y": 740,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "7fe7cf4c.9b184",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Open ngrok SSH",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "c56dc60f.e4fb38"
            ]
        ]
    },
    {
        "id": "39aaef07.8b2bd",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Kill ngrok SSH",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 520,
        "y": 780,
        "wires": [
            [
                "15ed14e5.3b6b8b"
            ]
        ]
    },
    {
        "id": "c56dc60f.e4fb38",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Open ngrok",
        "links": [
            "c03ffb31.4f9cd8"
        ],
        "x": 715,
        "y": 740,
        "wires": []
    },
    {
        "id": "15ed14e5.3b6b8b",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Kill ngrok",
        "links": [
            "8ddc30eb.d122d"
        ],
        "x": 715,
        "y": 780,
        "wires": []
    },
    {
        "id": "783b9f31.62dff",
        "type": "http request",
        "z": "cfc118ef.6ec4b8",
        "name": "SN",
        "method": "GET",
        "ret": "obj",
        "url": "127.0.0.1:8080/json/neuron/1",
        "tls": "",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "ff1cbeb9.22849"
            ]
        ]
    },
    {
        "id": "ff1cbeb9.22849",
        "type": "change",
        "z": "cfc118ef.6ec4b8",
        "name": "SN",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data.sn",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "ec0eb144.071be"
            ]
        ]
    },
    {
        "id": "ec0eb144.071be",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "UniPi SN",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 760,
        "y": 660,
        "wires": []
    },
    {
        "id": "5ca9fee6.cefe1",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "ngrok status",
        "label": "ngrok status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 710,
        "y": 820,
        "wires": []
    },
    {
        "id": "efe0d906.d78298",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "eddf1814.12a368"
        ],
        "x": 455,
        "y": 820,
        "wires": [
            [
                "5ca9fee6.cefe1"
            ]
        ]
    },
    {
        "id": "349a56c5.958f7a",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "modbus status",
        "label": "Modbus status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "6fdbe053.bde2b",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "4b3f19ae.313b98"
        ],
        "x": 455,
        "y": 860,
        "wires": [
            [
                "349a56c5.958f7a"
            ]
        ]
    },
    {
        "id": "5f9f3b85.152424",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "HTTP requests in last hour",
        "links": [
            "3db28c.db6a0d74",
            "dde1b039.23d75",
            "9a2e24b4.64f0a8"
        ],
        "x": 455,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ca56f1d4.6740c",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "39c42971.6da3f6",
            "5faecdb5.1feec4",
            "a1e860f3.376a4",
            "787d7bc8.9e6d04"
        ],
        "x": 455,
        "y": 900,
        "wires": [
            [
                "50c7ed7e.03f444"
            ]
        ]
    },
    {
        "id": "50c7ed7e.03f444",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "mqtt status",
        "label": "MQTT status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 710,
        "y": 900,
        "wires": []
    },
    {
        "id": "c43aeb0e.7a6e18",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload == \"kill\") {\n    return {\"kill\":\"\"};\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "e9136f6a.19dff"
            ]
        ]
    },
    {
        "id": "e9136f6a.19dff",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "lt -p",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "localtunnel",
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "79e0592e.2724b8",
                "7354a017.4a49a"
            ],
            [],
            []
        ]
    },
    {
        "id": "79e0592e.2724b8",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 970,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7354a017.4a49a",
        "type": "mqtt out",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/localtunnel/status",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1050,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5bdad33b.658e3c",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/localtunnel/control",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "c43aeb0e.7a6e18"
            ]
        ]
    },
    {
        "id": "3a88e155.768bce",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "704f4d26.dd7c74",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Get PI temperature",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "2b30bdd0.d30ec2"
            ]
        ]
    },
    {
        "id": "2b30bdd0.d30ec2",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "/opt/vc/bin/vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "measure_temp",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "1c7b69f5.fca866"
            ],
            [],
            []
        ]
    },
    {
        "id": "c0a923ff.b9833",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload == \"kill\") {\n    return {\"kill\":\"\"};\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "d858cd73.0e6b9"
            ]
        ]
    },
    {
        "id": "c015c898.5a9978",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 970,
        "y": 1380,
        "wires": []
    },
    {
        "id": "75ca8b10.9aba04",
        "type": "mqtt out",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/ngrok/status",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1030,
        "y": 1420,
        "wires": []
    },
    {
        "id": "113afbab.b76e54",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/ngrok/control",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 230,
        "y": 1420,
        "wires": [
            [
                "c0a923ff.b9833"
            ]
        ]
    },
    {
        "id": "d858cd73.0e6b9",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": " ./ngrok tcp ",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "NGROK exec",
        "x": 620,
        "y": 1420,
        "wires": [
            [
                "75ca8b10.9aba04",
                "c015c898.5a9978"
            ],
            [],
            []
        ]
    },
    {
        "id": "1c1cc864.857a98",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Get UniPi's temperature",
        "info": "",
        "x": 180,
        "y": 300,
        "wires": []
    },
    {
        "id": "66117c3f.d6fac4",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Open tunnel thru ngrok. In ngrok admin, IP+port can be obtained. USAGE: send `[protocol] [port_number]` e.g. `tcp 22` to specified topic",
        "info": "",
        "x": 550,
        "y": 1340,
        "wires": []
    },
    {
        "id": "d3fea35d.ed407",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Open tunnel thru localtunnel. URL is returned to `/status` topic. USAGE: send `[port_number]` to specified topic",
        "info": "",
        "x": 470,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2bb4598c.2b5336",
        "type": "status",
        "z": "bd23afa2.3f751",
        "name": "",
        "scope": [
            "d858cd73.0e6b9"
        ],
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "192fee75.8172c2"
            ]
        ]
    },
    {
        "id": "3cf96b5a.844394",
        "type": "status",
        "z": "bd23afa2.3f751",
        "name": "",
        "scope": [
            "e9136f6a.19dff"
        ],
        "x": 600,
        "y": 1140,
        "wires": [
            [
                "f3be9e5e.8ec17"
            ]
        ]
    },
    {
        "id": "9f6ea8f6.9a1f18",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/reboot",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "27827223.5a625e"
            ]
        ]
    },
    {
        "id": "f3be9e5e.8ec17",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "msg.payload = msg.status.text;\nnode.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 1140,
        "wires": [
            [
                "7354a017.4a49a",
                "79e0592e.2724b8"
            ]
        ]
    },
    {
        "id": "192fee75.8172c2",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "msg.payload = msg.status.text;\nnode.status({text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "c015c898.5a9978",
                "75ca8b10.9aba04"
            ]
        ]
    },
    {
        "id": "be79d3f1.215ea",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Reboot. USAGE: send 'reboot' to specified topic",
        "info": "",
        "x": 280,
        "y": 700,
        "wires": []
    },
    {
        "id": "bc8371f2.f9958",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Config after strartup",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "65393f3c.32cd9"
            ]
        ]
    },
    {
        "id": "65393f3c.32cd9",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "global.set('cust_uuid','3f399496-5cf8-4716-b771-9b9c96bee5a1');\nglobal.set('environment','staging'); // can be 'staging' or 'production';\nglobal.set('auth_token','eyJhbGciOiJFUzI1NiJ9.eyJqaXQiOiJhYjlhNTY1YjFhNzUyYjAxIiwic2NwIjoibGEiLCJ2ZXIiOjEsInN1YiI6IjNmMzk5NDk2LTVjZjgtNDcxNi1iNzcxLTliOWM5NmJlZTVhMSJ9._KCy1XQKHVAS3lKA5MsR44TYq6sg3G6TbC1KFw47lRuisFp9TNpakfp-x67jHESNXx255xZF_-MCNFTH5sBF-w');\n\nnode.status({text: \"configured\"});",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "db0b8b7c.afd9b8",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "After startup config - UUID etc",
        "info": "",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "27827223.5a625e",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload.toLowerCase() == 'reboot') {\n    return msg;\n} else {\n    node.status({text: \"UNSUCCESSFUL : \" + msg.payload});\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 820,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "1d1434cd.5fedfb",
        "type": "link in",
        "z": "bd23afa2.3f751",
        "name": "LED control",
        "links": [
            "b4c714ed.47c018"
        ],
        "x": 115,
        "y": 560,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "76993994.3d0c98",
        "type": "http request",
        "z": "bd23afa2.3f751",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 650,
        "y": 520,
        "wires": [
            [
                "37ff563f.415bfa"
            ]
        ]
    },
    {
        "id": "98f79b79.9ec288",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "led = msg.payload.led;\nvalue = msg.payload.value;\n\nmsg = {};\n\nmsg.payload = {\"value\": value.toString()};\nmsg.url = '127.0.0.1:8080/json/led/1_0' + led.toString();\n\nnode.status({text: \"LED #\" + led + \" state \" + value});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 520,
        "wires": [
            [
                "76993994.3d0c98",
                "9dfb0df7.04262"
            ]
        ]
    },
    {
        "id": "37ff563f.415bfa",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "9dfb0df7.04262",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "1c7b69f5.fca866",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "node.status({text: msg.payload});\n\n// value = msg.payload;\n// value = value.slice(5, -2);\n// value = parseFloat(value);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 340,
        "wires": [
            [
                "3a88e155.768bce"
            ]
        ]
    },
    {
        "id": "3963da2b.d24606",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "global.set('serno',msg.payload.data.sn.toString());\nnode.status({text: \"serno configured\"});",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8c856891.368758",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0014/led",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "21a7b07e.8256b"
            ]
        ]
    },
    {
        "id": "19113684.15b089",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 570,
        "y": 600,
        "wires": []
    },
    {
        "id": "21a7b07e.8256b",
        "type": "json",
        "z": "bd23afa2.3f751",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 600,
        "wires": [
            [
                "19113684.15b089",
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "2a0ab6a1.d5a49a",
        "type": "debug",
        "z": "1996f926.c36f07",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "686e63ab.d472ec",
        "type": "mqtt out",
        "z": "1996f926.c36f07",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "edff2224.e98b2",
        "type": "status",
        "z": "1996f926.c36f07",
        "name": "",
        "scope": [
            "686e63ab.d472ec"
        ],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "5faecdb5.1feec4",
                "3a330f11.8b406"
            ]
        ]
    },
    {
        "id": "5faecdb5.1feec4",
        "type": "link out",
        "z": "1996f926.c36f07",
        "name": "MQTT status",
        "links": [
            "ca56f1d4.6740c"
        ],
        "x": 975,
        "y": 360,
        "wires": []
    },
    {
        "id": "3a330f11.8b406",
        "type": "debug",
        "z": "1996f926.c36f07",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1010,
        "y": 400,
        "wires": []
    },
    {
        "id": "84aeffc2.e1704",
        "type": "encode",
        "z": "1996f926.c36f07",
        "name": "",
        "protofile": "715da2c7.10cd0c",
        "protoType": "MQTTDataPoint",
        "x": 820,
        "y": 200,
        "wires": [
            [
                "686e63ab.d472ec",
                "c452a0f8.22012",
                "f4115e1.2a85ea"
            ]
        ]
    },
    {
        "id": "3b0f290b.e9fe36",
        "type": "function",
        "z": "1996f926.c36f07",
        "name": "Prepare MQTT",
        "func": "incoming_message = msg.payload;\nmsg = {};\n\ncust_uuid = global.get('cust_uuid');\nenvironment = global.get('environment');\n\nsuit = incoming_message.suit.toString();\nmeter_id = incoming_message.meterid.toString();\n\nmsg.payload = {\n    \"time\": incoming_message.time,\n    \"value\": incoming_message.value,\n    \"sender\": \"unipi\"\n}\n\nif (incoming_message.point_type == 'reading'){\n    msg.topic = environment + '/reading/' + cust_uuid + '/' + meter_id + '/' + suit;\n} else {\n    msg.topic = environment + '/data_point/' + cust_uuid + '/' + meter_id + '/' + suit;\n}\n\n\nnode.status({text: \"Last message at \" + msg.payload.time.toString()});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "84aeffc2.e1704",
                "2a0ab6a1.d5a49a"
            ]
        ]
    },
    {
        "id": "c452a0f8.22012",
        "type": "debug",
        "z": "1996f926.c36f07",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "f4115e1.2a85ea",
        "type": "debug",
        "z": "1996f926.c36f07",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "x": 1080,
        "y": 300,
        "wires": []
    },
    {
        "id": "da52cff4.69ba7",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "msg.payload =  { ",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "150e8c4d.a6fe04",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": " 'value': HODNOTA:FLOAT,",
        "info": "msg.payload = \n{\n    'value': HODNOTA:FLOAT,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "1ecbbd4f.8e2c73",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "'time': CAS,",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': Math.floor(Date.now() / 1000);,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 490,
        "y": 480,
        "wires": []
    },
    {
        "id": "6101c0d6.28e6a",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "'meterid': METER_ID,",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 520,
        "y": 520,
        "wires": []
    },
    {
        "id": "78a4ef08.c0cfd",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": " 'suit': \"SUIT\",",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "5266af6f.a54bb",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "'point_type': \"data_point\" ",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "927b2771.e06998",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "}",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 450,
        "y": 640,
        "wires": []
    },
    {
        "id": "a67bcc81.6d6de",
        "type": "modbus-flex-getter",
        "z": "2425c728.063d68",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "1750ed1.acf9a13",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 490,
        "y": 100,
        "wires": [
            [],
            [
                "fd2207f3.520a28",
                "bd27ca2.0b62038"
            ]
        ]
    },
    {
        "id": "fd2207f3.520a28",
        "type": "debug",
        "z": "2425c728.063d68",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "bd27ca2.0b62038",
        "type": "function",
        "z": "2425c728.063d68",
        "name": "Extract value",
        "func": "node.status({fill:\"grey\",shape:\"dot\",text:\"waiting\"});\n\nif (msg.input.payload.value.datatype == \"int32\") {\n    val = msg.payload.buffer.readInt32BE(0,4);\n    node.status({fill:\"green\",shape:\"dot\",text:\"int32\"});\n} else if (msg.input.payload.value.datatype == \"float\") {\n    val = msg.payload.buffer.readFloatBE(0,4);\n    node.status({fill:\"green\",shape:\"dot\",text:\"float\"});\n} else if (msg.input.payload.value.datatype == \"hex\") {\n    val = msg.payload.buffer.toString('hex');\n    node.status({fill:\"green\",shape:\"dot\",text:\"hex\"});\n} else if (msg.input.payload.value.datatype == \"int16\") {\n    val = msg.payload.buffer.readInt16BE(0,2);\n    node.status({fill:\"green\",shape:\"dot\",text:\"int16\"});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"unknown datatype\"});\n    return\n}\n\nlet meter_id = msg.input.payload.value.meterid;\nlet suit = msg.input.payload.address;\nlet time = Math.floor(Date.now() / 1000);\nlet point_type = msg.input.payload.value.point_type;\n\nmsg = {};\n\nmsg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': meter_id,\n    'suit': suit,\n    'point_type': point_type\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 100,
        "wires": [
            [
                "2201271a.3d4eb8"
            ]
        ]
    },
    {
        "id": "94fdb29d.952d4",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Unit 1 kW",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 3, \n    'unitid': 1, \n    'address': 8320, \n    'quantity': 2,\n    'value': { \n        'datatype': 'float', \n        'meterid': 18070292,\n        'point_type': 'data_point',\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "69874fef.9ac26",
        "type": "inject",
        "z": "63d8f1ba.cdaab",
        "name": "seconds",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 180,
        "y": 700,
        "wires": [
            [
                "94fdb29d.952d4"
            ]
        ]
    },
    {
        "id": "ab85b6b8.085978",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "MODBUS RTU",
        "info": "",
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "72a2e152.a2284",
        "type": "inject",
        "z": "63d8f1ba.cdaab",
        "name": "CRON 15 minutes",
        "topic": "",
        "payload": "send",
        "payloadType": "str",
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "1a83c4f8.a4ac1b",
                "8ae36304.6d109",
                "59101f1.c1214e",
                "298f18e4.6befd8"
            ]
        ]
    },
    {
        "id": "1a83c4f8.a4ac1b",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Unit 1 kWh",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 3, \n    'unitid': 1, \n    'address': 12288, \n    'quantity': 2,\n    'value': { \n        'datatype': 'float', \n        'meterid': 18070292,\n        'point_type': 'reading',\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a7a63.54aa558",
        "type": "link in",
        "z": "2425c728.063d68",
        "name": "Modbus_reading_in",
        "links": [
            "bc177977.b5bbd8"
        ],
        "x": 255,
        "y": 100,
        "wires": [
            [
                "a67bcc81.6d6de"
            ]
        ]
    },
    {
        "id": "2201271a.3d4eb8",
        "type": "link out",
        "z": "2425c728.063d68",
        "name": "Modbus_reading_out",
        "links": [
            "cc6a57f6.221fa8",
            "e6ba485e.d54388"
        ],
        "x": 975,
        "y": 100,
        "wires": []
    },
    {
        "id": "bc177977.b5bbd8",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "a9a7a63.54aa558"
        ],
        "x": 955,
        "y": 260,
        "wires": []
    },
    {
        "id": "28486630.910fca",
        "type": "exec",
        "z": "166c9413.bd75bc",
        "command": "/opt/vc/bin/vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "measure_temp",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "f657f590.efd968"
            ],
            [],
            []
        ]
    },
    {
        "id": "f657f590.efd968",
        "type": "function",
        "z": "166c9413.bd75bc",
        "name": "convert output to standard message format",
        "func": "node.status({text: msg.payload});\n\nval = msg.payload;\nval = val.slice(5, -2);\nval = parseFloat(val);\nlet time = Math.floor(Date.now() / 1000);\nmsg = {};\n\nmsg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': global.get('serno'),\n    'suit': \"cpu_temperature\",\n    'point_type': \"data_point\"\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 160,
        "wires": [
            [
                "56416bc3.6e70f4",
                "ae3424eb.2a5138"
            ]
        ]
    },
    {
        "id": "f78bb6ee.e9b678",
        "type": "link in",
        "z": "166c9413.bd75bc",
        "name": "Measure_Pi_temperature",
        "links": [
            "1c04da64.7c63a6"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "28486630.910fca"
            ]
        ]
    },
    {
        "id": "56416bc3.6e70f4",
        "type": "link out",
        "z": "166c9413.bd75bc",
        "name": "Special_reading_out",
        "links": [
            "a47e09ae.834788",
            "31762113.90274e",
            "189bec5c.0898d4"
        ],
        "x": 1375,
        "y": 240,
        "wires": []
    },
    {
        "id": "a47e09ae.834788",
        "type": "link in",
        "z": "1996f926.c36f07",
        "name": "MQTT_in",
        "links": [
            "56416bc3.6e70f4",
            "4de69214.9198fc"
        ],
        "x": 295,
        "y": 200,
        "wires": [
            [
                "3b0f290b.e9fe36"
            ]
        ]
    },
    {
        "id": "1c04da64.7c63a6",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "f78bb6ee.e9b678"
        ],
        "x": 955,
        "y": 300,
        "wires": []
    },
    {
        "id": "6171764f.783808",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "PROCESSOR TEMPERATURE",
        "info": "",
        "x": 1290,
        "y": 300,
        "wires": []
    },
    {
        "id": "3f39fd90.3d3ba2",
        "type": "http request",
        "z": "166c9413.bd75bc",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "535cebde.f64de4",
                "5dcb8d0a.f9e9e4"
            ]
        ]
    },
    {
        "id": "535cebde.f64de4",
        "type": "function",
        "z": "166c9413.bd75bc",
        "name": "parse output to standard message format",
        "func": "if(msg.payload.status == 'success') {\n\n    val = msg.payload.data.value;\n    meter_id = msg.payload.data.address;\n    time = Math.floor(msg.payload.data.time);\n    //let time = Math.floor(Date.now() / 1000);\n    \n    \n    msg = {};\n    \n    msg.payload = \n    {\n        'value': val,\n        'time': time,\n        'meterid': meter_id,\n        'suit': \"1wire\",\n        'point_type': \"data_point\"\n    };\n    \n    node.status({text: 'Last read: ' + msg.payload.value.toString()});\n    return msg;\n} else return",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "56416bc3.6e70f4",
                "877db96b.11e178"
            ]
        ]
    },
    {
        "id": "5fffcd00.69c524",
        "type": "link in",
        "z": "166c9413.bd75bc",
        "name": "Onewire",
        "links": [
            "6c094f38.d7bbd"
        ],
        "x": 235,
        "y": 320,
        "wires": [
            [
                "3484f9a6.c959c6"
            ]
        ]
    },
    {
        "id": "8461fdd5.52fd5",
        "type": "comment",
        "z": "166c9413.bd75bc",
        "name": "Processor temperature",
        "info": "",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "ed678419.326ab8",
        "type": "comment",
        "z": "166c9413.bd75bc",
        "name": "1-Wire thermometer",
        "info": "",
        "x": 370,
        "y": 280,
        "wires": []
    },
    {
        "id": "6c094f38.d7bbd",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "5fffcd00.69c524"
        ],
        "x": 955,
        "y": 340,
        "wires": []
    },
    {
        "id": "a3488b7e.fb5fa8",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "ONEWIRE TEMPERATURE",
        "info": "",
        "x": 1280,
        "y": 340,
        "wires": []
    },
    {
        "id": "9d8cee80.e6096",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "1Wire thermometer 286FCAB20900007E",
        "func": "// 1-Wire thermometer\n\nmsg.payload = \n{ \n    'address': '286FCAB20900007E'\n} \n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "3484f9a6.c959c6",
        "type": "function",
        "z": "166c9413.bd75bc",
        "name": "prepare request",
        "func": "incoming = msg.payload;\nmsg = {};\n\nmsg.url = '127.0.0.1:8080/json/sensor/' + incoming.address;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 320,
        "wires": [
            [
                "3f39fd90.3d3ba2",
                "ad453bae.a9ca98"
            ]
        ]
    },
    {
        "id": "877db96b.11e178",
        "type": "debug",
        "z": "166c9413.bd75bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "ad453bae.a9ca98",
        "type": "debug",
        "z": "166c9413.bd75bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 590,
        "y": 380,
        "wires": []
    },
    {
        "id": "5dcb8d0a.f9e9e4",
        "type": "debug",
        "z": "166c9413.bd75bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "848e029d.f9698",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "this should be connected to Modbus RTU flow",
        "info": "",
        "x": 930,
        "y": 700,
        "wires": []
    },
    {
        "id": "d662a23b.e5d12",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "7673c3c1.4cb68c",
            "de9cf2c5.4d35c"
        ],
        "x": 955,
        "y": 380,
        "wires": [],
        "inputLabels": [
            "DI"
        ]
    },
    {
        "id": "7694286.20370d8",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "DIGITAL INPUTS",
        "info": "",
        "x": 1240,
        "y": 380,
        "wires": []
    },
    {
        "id": "ae3424eb.2a5138",
        "type": "debug",
        "z": "166c9413.bd75bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1190,
        "y": 120,
        "wires": []
    },
    {
        "id": "757e1170.08812",
        "type": "function",
        "z": "a68312fe.fc5a8",
        "name": "",
        "func": "context.digital_inputs = context.digital_inputs || [];\n\n// send only on 'send' command, otherwise chceck if anything changed\nif(msg.payload == 'send'){\n    send = true;\n} else {\n    send = false;\n    digital_inputs = msg.payload.data.slice(0,8);\n}\n\nmsg = {};\n\nif(context.digital_inputs == digital_inputs && !send){\n    return;\n} else if (!send) {\n    comparison = [];\n    for(i = 0; i < digital_inputs.length; i++) {\n\t    comparison[i] = digital_inputs[i] == context.digital_inputs[i];\n    }\n    for(i = 0; i < comparison.length; i++) {\n\t    if(!comparison[i]){\n\t        time = Math.floor(Date.now() / 1000);\n\t        msg.payload = \n                {\n                    'value': digital_inputs[i] ? 1:0,\n                    'time': time,\n                    'meterid': global.get('serno') + '_di_' + i.toString(), // was serno_di\n                    'suit': 0, // was i\n                    'point_type': \"data_point\"\n                }; \n            node.send(msg)\n\t    }\n    }\n    context.digital_inputs = digital_inputs;\n} \n\n\nif(send) {\n\ttime = Math.floor(Date.now() / 1000);\n    for(i = 0; i < digital_inputs.length; i++) {\n\t    msg.payload = \n                {\n                    'value': digital_inputs[i] ? 1:0,\n                    'time': time,\n                    'meterid': global.get('serno') + '_di_' + i.toString(), // was serno_di\n                    'suit': 0, // was i\n                    'point_type': \"data_point\"\n                }; \n            node.send(msg)\n\t}\n\tcontext.digital_inputs = digital_inputs;\n}\n\nnode.status({text: 'Status: ' + (context.digital_inputs[0] ? 1:0) + '|' + (context.digital_inputs[1] ? 1:0) + '|' + (context.digital_inputs[2] ? 1:0) + '|' + (context.digital_inputs[3] ? 1:0)});\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "e7bbc0ff.ac7bd",
                "4de69214.9198fc"
            ]
        ]
    },
    {
        "id": "de9cf2c5.4d35c",
        "type": "link in",
        "z": "a68312fe.fc5a8",
        "name": "Digital_inputs",
        "links": [
            "d662a23b.e5d12"
        ],
        "x": 295,
        "y": 260,
        "wires": [
            [
                "757e1170.08812"
            ]
        ]
    },
    {
        "id": "46ed65da.d8b9fc",
        "type": "modbus-read",
        "z": "a68312fe.fc5a8",
        "name": "Read digital inputs",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "admin",
        "dataType": "Input",
        "adr": "4",
        "quantity": "8",
        "rate": "500",
        "rateUnit": "ms",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "99bb737d.29857",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 430,
        "y": 320,
        "wires": [
            [],
            [
                "757e1170.08812",
                "e01e0f5e.a542b"
            ]
        ]
    },
    {
        "id": "e7bbc0ff.ac7bd",
        "type": "debug",
        "z": "a68312fe.fc5a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 300,
        "wires": []
    },
    {
        "id": "a976a810.974498",
        "type": "comment",
        "z": "a68312fe.fc5a8",
        "name": "TCP Modbus - digital values",
        "info": "",
        "x": 460,
        "y": 240,
        "wires": []
    },
    {
        "id": "4de69214.9198fc",
        "type": "link out",
        "z": "a68312fe.fc5a8",
        "name": "Special_reading_out",
        "links": [
            "a47e09ae.834788",
            "31762113.90274e",
            "189bec5c.0898d4"
        ],
        "x": 1295,
        "y": 260,
        "wires": []
    },
    {
        "id": "7bac650b.d7579c",
        "type": "comment",
        "z": "a68312fe.fc5a8",
        "name": "^ set period according to measured system",
        "info": "",
        "x": 500,
        "y": 380,
        "wires": []
    },
    {
        "id": "be7dd5a3.224998",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "convert message format as described under to MQTT message, encode with protobuf",
        "info": "",
        "x": 720,
        "y": 140,
        "wires": []
    },
    {
        "id": "17d1677c.a35709",
        "type": "comment",
        "z": "a68312fe.fc5a8",
        "name": "Send only when receive msg.payload == 'send', or on each input change",
        "info": "",
        "x": 910,
        "y": 200,
        "wires": []
    },
    {
        "id": "1aedd736.c7a509",
        "type": "comment",
        "z": "166c9413.bd75bc",
        "name": "using internal system command",
        "info": "",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "fd3ff4a5.b5ec28",
        "type": "comment",
        "z": "166c9413.bd75bc",
        "name": "send to MQTT",
        "info": "",
        "x": 1490,
        "y": 240,
        "wires": []
    },
    {
        "id": "8ae36304.6d109",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Produal CO2",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 4, \n    'unitid': 1, \n    'address': 4, \n    'quantity': 1,\n    'value': { \n        'datatype': 'int16', \n        'meterid': 1,\n        'point_type': 'data_point',\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 240,
        "wires": [
            [
                "bc177977.b5bbd8"
            ]
        ]
    },
    {
        "id": "298f18e4.6befd8",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Produal Temperature",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 4, \n    'unitid': 1, \n    'address': 0, \n    'quantity': 1,\n    'value': { \n        'datatype': 'int16', \n        'meterid': 1,\n        'point_type': 'data_point',\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "bc177977.b5bbd8"
            ]
        ]
    },
    {
        "id": "59101f1.c1214e",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Produal Humidity",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 4, \n    'unitid': 1, \n    'address': 5, \n    'quantity': 1,\n    'value': { \n        'datatype': 'int16', \n        'meterid': 1,\n        'point_type': 'data_point',\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "bc177977.b5bbd8"
            ]
        ]
    },
    {
        "id": "531f4f7e.2c4ec",
        "type": "inject",
        "z": "63d8f1ba.cdaab",
        "name": "seconds",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "8ae36304.6d109"
            ]
        ]
    },
    {
        "id": "8cb58c8c.94313",
        "type": "function",
        "z": "9a0cdbf9.75f828",
        "name": "plot on dashboard",
        "func": "msg = {\n    'payload': msg.payload.value,\n    'topic': msg.payload.suit\n}\n\nif(msg.topic == 4){\n    return [msg,null,null];\n} else if(msg.topic == 0){\n    msg.payload = msg.payload * 0.1;\n    return [null,msg,null];\n} else if(msg.topic == 5){\n    msg.payload = msg.payload * 0.1;\n    return [null,null,msg];\n} else {\n    return\n}",
        "outputs": 3,
        "noerr": 0,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "c8ad3d35.df62c",
                "f13a6bc8.01df28",
                "7092126c.b6f58c",
                "b7c08ce3.3466b"
            ],
            [
                "1b1d6ebe.f0dd01"
            ],
            [
                "229977e3.3001e8"
            ]
        ]
    },
    {
        "id": "c8ad3d35.df62c",
        "type": "ui_chart",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "group": "501367b7.f58d18",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "CO2 [ppm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 870,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1b1d6ebe.f0dd01",
        "type": "ui_chart",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "group": "501367b7.f58d18",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Temperature [°C]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 890,
        "y": 320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "229977e3.3001e8",
        "type": "ui_chart",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "group": "501367b7.f58d18",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "RH [%]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 860,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cc6a57f6.221fa8",
        "type": "link in",
        "z": "9a0cdbf9.75f828",
        "name": "plot on dashboard - office conditions",
        "links": [
            "2201271a.3d4eb8"
        ],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "8cb58c8c.94313"
            ]
        ]
    },
    {
        "id": "f13a6bc8.01df28",
        "type": "ui_gauge",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "group": "501367b7.f58d18",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "CO2",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1000",
        "seg2": "1500",
        "x": 850,
        "y": 140,
        "wires": []
    },
    {
        "id": "d02c4e8c.802cd",
        "type": "slack",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "channelURL": "https://hooks.slack.com/services/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",
        "username": "CO2 Sensor",
        "emojiIcon": ":skull:",
        "channel": "office",
        "x": 990,
        "y": 100,
        "wires": []
    },
    {
        "id": "7092126c.b6f58c",
        "type": "function",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "func": "context.lastsent = context.lastsent || Date.now();\nlimit_a1 = 2000;\nlimit_a2 = 3000;\nsnoozeperiod_a1 = 1800000;\nsnoozeperiod_a2 = 300000;\n\nif(msg.payload > limit_a2 && Date.now()- context.lastsent > snoozeperiod_a2){\n    msg.payload = ':skull: CO2 level is *' + msg.payload.toString() + '* ppm. *Open the window, or you will die soon!* :skull:';\n    context.lastsent = Date.now();\n    return msg;\n} else if(msg.payload > limit_a1 && Date.now()- context.lastsent > snoozeperiod_a1){\n    msg.payload = 'CO2 level is *' + msg.payload.toString() + '* ppm. Open the window, please.';\n    context.lastsent = Date.now();\n    return msg;\n} else return\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 100,
        "wires": [
            [
                "d02c4e8c.802cd"
            ]
        ]
    },
    {
        "id": "efe17f74.1ff83",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "this should be connected to Modbus RTU flow",
        "info": "",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "e532f9a4.55ea08",
        "type": "modbus-flex-getter",
        "z": "2425c728.063d68",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "99bb737d.29857",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 490,
        "y": 280,
        "wires": [
            [],
            [
                "bd27ca2.0b62038",
                "fc5e4f57.0b25f"
            ]
        ]
    },
    {
        "id": "7109f51d.31310c",
        "type": "link in",
        "z": "2425c728.063d68",
        "name": "ModbusTCP_reading_in",
        "links": [
            "5c664490.84d21c"
        ],
        "x": 255,
        "y": 280,
        "wires": [
            [
                "e532f9a4.55ea08"
            ]
        ]
    },
    {
        "id": "fc5e4f57.0b25f",
        "type": "debug",
        "z": "2425c728.063d68",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "45790f01.bc127",
        "type": "comment",
        "z": "2425c728.063d68",
        "name": "TCP Modbus - Mervis Unipi",
        "info": "",
        "x": 460,
        "y": 240,
        "wires": []
    },
    {
        "id": "4b81935d.682e2c",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "MODBUS TCP",
        "info": "",
        "x": 1240,
        "y": 420,
        "wires": []
    },
    {
        "id": "5c664490.84d21c",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "7109f51d.31310c"
        ],
        "x": 955,
        "y": 420,
        "wires": []
    },
    {
        "id": "b7c08ce3.3466b",
        "type": "ui_chart",
        "z": "9a0cdbf9.75f828",
        "name": "",
        "group": "501367b7.f58d18",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "CO2 [ppm] last week",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 900,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fe546d12.b78e1",
        "type": "inject",
        "z": "63d8f1ba.cdaab",
        "name": "CRON 10 minutes",
        "topic": "",
        "payload": "send",
        "payloadType": "str",
        "repeat": "",
        "crontab": "*/10 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e01e0f5e.a542b",
        "type": "debug",
        "z": "a68312fe.fc5a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 320,
        "wires": []
    },
    {
        "id": "43e8dcf7.5a84e4",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "msg.payload =  { ",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "b6ee4bb3.6432e8",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": " 'value': HODNOTA:FLOAT,",
        "info": "msg.payload = \n{\n    'value': HODNOTA:FLOAT,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 570,
        "y": 440,
        "wires": []
    },
    {
        "id": "ede5b831.d8c5f8",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "'time': CAS,",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': Math.floor(Date.now() / 1000);,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "ed98636d.39e24",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "'meterid': METER_ID,",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "f2a729e5.c33e48",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": " 'suit': \"SUIT\",",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "9149651d.5af6f8",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "'point_type': \"data_point\" ",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 570,
        "y": 600,
        "wires": []
    },
    {
        "id": "a442098f.b4a738",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "}",
        "info": "msg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 99999999,\n    'suit': \"1wire\",\n    'point_type': \"data_point\"\n};",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "16dc0754.f49dc9",
        "type": "comment",
        "z": "8d494dac.9cfcb",
        "name": "convert message format as described to Enectiva Librarian API request",
        "info": "",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "e6ba485e.d54388",
        "type": "link in",
        "z": "8d494dac.9cfcb",
        "name": "HTTP_in",
        "links": [
            "328f4341.7733ec",
            "2201271a.3d4eb8",
            "5372c7cf.056298"
        ],
        "x": 335,
        "y": 200,
        "wires": [
            [
                "28d9eaa6.ef4186",
                "eefc898f.4f4ad8"
            ]
        ]
    },
    {
        "id": "28d9eaa6.ef4186",
        "type": "function",
        "z": "8d494dac.9cfcb",
        "name": "Prepare HTTP request",
        "func": "cust_uuid = global.get('cust_uuid');\nenvironment = global.get('environment');\nauth_token = global.get('auth_token');\nincoming_message = msg.payload;\nmsg = {};\n\n\nif (environment == 'production'){\n    address = \"enectiva.cz\";\n} else {\n    address = \"mericitechnologie.cz\";\n}\n\n\nif (incoming_message.point_type == 'reading'){\n    type = 'readings';\n} else {\n    type = \"data_points\";\n}\n\n\nISOtimeObj = new Date(1000*incoming_message.time);\nISOtime = ISOtimeObj.toISOString();\n\n\nmsg.url = \"https://api.\" + address + \"/\" + type + \"/\" + cust_uuid\n\nmsg.headers = {\n    'Content-Type': 'application/vnd.api+json',\n    'Authorization': 'Bearer: ' + auth_token,\n    'Accept': 'application/vnd.api+json'\n}\n\nmsg.payload = {\n    \"data\": {\n        \"time\": ISOtime,\n        \"state\": incoming_message.value,\n        \"value\": incoming_message.value,\n        \"meter_id\": incoming_message.meterid.toString() + \"_\" + incoming_message.suit.toString(),\n        \"series_id\": incoming_message.meterid.toString() + \"_\" + incoming_message.suit.toString(),\n        \"sender\": \"unipi\",\n        \"suit\": \"0\"\n    }\n}\n\nnode.status({text: \"Last message at \" + incoming_message.time.toString()});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 200,
        "wires": [
            [
                "ac50401a.eb432",
                "3a658a1.01a4a76"
            ]
        ]
    },
    {
        "id": "ac50401a.eb432",
        "type": "http request",
        "z": "8d494dac.9cfcb",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 950,
        "y": 200,
        "wires": [
            [
                "6443f49c.c6e11c",
                "b3798f8f.68841"
            ]
        ]
    },
    {
        "id": "6443f49c.c6e11c",
        "type": "debug",
        "z": "8d494dac.9cfcb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1150,
        "y": 260,
        "wires": []
    },
    {
        "id": "328f4341.7733ec",
        "type": "link out",
        "z": "a68312fe.fc5a8",
        "name": "",
        "links": [
            "e6ba485e.d54388"
        ],
        "x": 1295,
        "y": 220,
        "wires": []
    },
    {
        "id": "eefc898f.4f4ad8",
        "type": "debug",
        "z": "8d494dac.9cfcb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "3a658a1.01a4a76",
        "type": "debug",
        "z": "8d494dac.9cfcb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "fc39d10.24c263",
        "type": "comment",
        "z": "a68312fe.fc5a8",
        "name": "HTTP",
        "info": "",
        "x": 1370,
        "y": 220,
        "wires": []
    },
    {
        "id": "7d48bfad.ef4cd",
        "type": "comment",
        "z": "a68312fe.fc5a8",
        "name": "MQTT",
        "info": "",
        "x": 1370,
        "y": 260,
        "wires": []
    },
    {
        "id": "b3798f8f.68841",
        "type": "switch",
        "z": "8d494dac.9cfcb",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 200,
        "wires": [
            [
                "884846b4.628278"
            ],
            [
                "180569bc.dd6866"
            ]
        ]
    },
    {
        "id": "180569bc.dd6866",
        "type": "debug",
        "z": "8d494dac.9cfcb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1350,
        "y": 260,
        "wires": []
    },
    {
        "id": "884846b4.628278",
        "type": "debug",
        "z": "8d494dac.9cfcb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1350,
        "y": 140,
        "wires": []
    },
    {
        "id": "c06a4338.2171c",
        "type": "inject",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "*/10 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "9c2e22a8.c76ce"
            ]
        ]
    },
    {
        "id": "5372c7cf.056298",
        "type": "link out",
        "z": "63d8f1ba.cdaab",
        "name": "",
        "links": [
            "e6ba485e.d54388"
        ],
        "x": 955,
        "y": 540,
        "wires": []
    },
    {
        "id": "9c2e22a8.c76ce",
        "type": "function",
        "z": "63d8f1ba.cdaab",
        "name": "Send timestamp",
        "func": "node.status({text: msg.payload});\n\nval = msg.payload;\nlet time = Math.floor(Date.now() / 1000);\nmsg = {};\n\nmsg.payload = \n{\n    'value': val,\n    'time': time,\n    'meterid': 'timestamp',\n    'suit': \"0\",\n    'point_type': \"reading\"\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 540,
        "wires": [
            [
                "5372c7cf.056298"
            ]
        ]
    },
    {
        "id": "b78fb9fb.e18618",
        "type": "comment",
        "z": "63d8f1ba.cdaab",
        "name": "Pass payload as is",
        "info": "",
        "x": 1250,
        "y": 540,
        "wires": []
    },
    {
        "id": "ee6f2df2.1bfcb",
        "type": "comment",
        "z": "1996f926.c36f07",
        "name": "Documentation of message object format",
        "info": "```\nmsg.payload = \n{   \n    'value': val,   \n    'time': time,   \n    'meterid': 99999999,   \n    'suit': \"1wire\",   \n    'point_type': \"data_point\"   \n};\n```",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "463739a6.5c4008",
        "type": "inject",
        "z": "1997b6f4.3b6919",
        "name": "every 30 mins",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "*/30 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "59bf9726.98ab88"
            ]
        ]
    },
    {
        "id": "59bf9726.98ab88",
        "type": "http request",
        "z": "1997b6f4.3b6919",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "url": "http://dataservice.accuweather.com/forecasts/v1/hourly/12hour/1372216?apikey=8sMMOrXf2I6GIWUAx4OKDHRPTmA3VBW6&metric=true",
        "tls": "",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "93194919.90b748",
                "79051d67.ce4734"
            ]
        ]
    },
    {
        "id": "93194919.90b748",
        "type": "debug",
        "z": "1997b6f4.3b6919",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 550,
        "y": 60,
        "wires": []
    },
    {
        "id": "79051d67.ce4734",
        "type": "json",
        "z": "1997b6f4.3b6919",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "7e7f9729.48ece8",
                "1d429035.52f12"
            ]
        ]
    },
    {
        "id": "7e7f9729.48ece8",
        "type": "debug",
        "z": "1997b6f4.3b6919",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "1d429035.52f12",
        "type": "function",
        "z": "1997b6f4.3b6919",
        "name": "process data",
        "func": "// var temperatures = new Float32Array(12);\n// var timestamps = new Float32Array(12);\ntemperatures = [];\ntimestamps = [];\n\nfor (hour = 0; hour < msg.payload.length; hour++) {\n    tmstp = msg.payload[hour].EpochDateTime;\n    timestamps[2*hour] = Math.floor(tmstp / 65536);\n    timestamps[2*hour+1] = Math.floor(tmstp % 65536);\n    \n    temperatures[hour] = (65536 + Math.round(10 * msg.payload[hour].Temperature.Value)) % 65536;\n}\n\nmsg = {};\nmsg.payload = timestamps;\n\nmsg2 = {};\nmsg2.payload = temperatures\n// msg.payload.timestamps = timestamps;\n// msg.payload.temperatures = temperatures;\n\nreturn [msg, msg2];",
        "outputs": 2,
        "noerr": 0,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "42bfea43.c2f994",
                "336d03ce.ff22fc"
            ],
            [
                "ae3a1072.a96e2",
                "42bfea43.c2f994"
            ]
        ]
    },
    {
        "id": "42bfea43.c2f994",
        "type": "debug",
        "z": "1997b6f4.3b6919",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "96cbcb92.d67048",
        "type": "inject",
        "z": "1997b6f4.3b6919",
        "name": "sample data",
        "topic": "",
        "payload": "[{\"DateTime\":\"2019-08-06T15:00:00+02:00\",\"EpochDateTime\":1565096400,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":28,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":5,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=15&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=15&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T16:00:00+02:00\",\"EpochDateTime\":1565100000,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":28.3,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":6,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=16&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=16&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T17:00:00+02:00\",\"EpochDateTime\":1565103600,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":27.3,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":7,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=17&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=17&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T18:00:00+02:00\",\"EpochDateTime\":1565107200,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":26,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":7,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=18&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=18&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T19:00:00+02:00\",\"EpochDateTime\":1565110800,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":24.7,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":9,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=19&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=19&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T20:00:00+02:00\",\"EpochDateTime\":1565114400,\"WeatherIcon\":4,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":true,\"Temperature\":{\"Value\":23,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":14,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=20&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=20&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T21:00:00+02:00\",\"EpochDateTime\":1565118000,\"WeatherIcon\":36,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":false,\"Temperature\":{\"Value\":22.6,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":18,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=21&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=21&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T22:00:00+02:00\",\"EpochDateTime\":1565121600,\"WeatherIcon\":36,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":false,\"Temperature\":{\"Value\":21.3,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":23,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=22&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=22&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-06T23:00:00+02:00\",\"EpochDateTime\":1565125200,\"WeatherIcon\":42,\"IconPhrase\":\"Mostly cloudy w/ t-storms\",\"HasPrecipitation\":true,\"PrecipitationType\":\"Rain\",\"PrecipitationIntensity\":\"Moderate\",\"IsDaylight\":false,\"Temperature\":{\"Value\":20.3,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":47,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=23&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=1&hbhhour=23&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-07T00:00:00+02:00\",\"EpochDateTime\":1565128800,\"WeatherIcon\":36,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":false,\"Temperature\":{\"Value\":0,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":51,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=0&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=0&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-07T01:00:00+02:00\",\"EpochDateTime\":1565132400,\"WeatherIcon\":36,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":false,\"Temperature\":{\"Value\":-7.1,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":47,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=1&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=1&unit=c&lang=en-us\"},{\"DateTime\":\"2019-08-07T02:00:00+02:00\",\"EpochDateTime\":1565136000,\"WeatherIcon\":36,\"IconPhrase\":\"Intermittent clouds\",\"HasPrecipitation\":false,\"IsDaylight\":false,\"Temperature\":{\"Value\":-8.6,\"Unit\":\"C\",\"UnitType\":17},\"PrecipitationProbability\":43,\"MobileLink\":\"http://m.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=2&unit=c&lang=en-us\",\"Link\":\"http://www.accuweather.com/en/cz/pisnice/1372216/hourly-weather-forecast/1372216?day=2&hbhhour=2&unit=c&lang=en-us\"}]",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "1d429035.52f12"
            ]
        ]
    },
    {
        "id": "336d03ce.ff22fc",
        "type": "modbus-write",
        "z": "1997b6f4.3b6919",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "admin",
        "dataType": "MHoldingRegisters",
        "adr": "1000",
        "quantity": "24",
        "server": "8c733cd6.89e0b",
        "x": 980,
        "y": 140,
        "wires": [
            [
                "a47c8c04.0fb07"
            ],
            []
        ]
    },
    {
        "id": "a47c8c04.0fb07",
        "type": "debug",
        "z": "1997b6f4.3b6919",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1210,
        "y": 80,
        "wires": []
    },
    {
        "id": "ae3a1072.a96e2",
        "type": "modbus-write",
        "z": "1997b6f4.3b6919",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "admin",
        "dataType": "MHoldingRegisters",
        "adr": "1032",
        "quantity": "12",
        "server": "8c733cd6.89e0b",
        "x": 980,
        "y": 180,
        "wires": [
            [
                "a47c8c04.0fb07"
            ],
            []
        ]
    },
    {
        "id": "daec47a1.7ad168",
        "type": "comment",
        "z": "1997b6f4.3b6919",
        "name": "Documentation",
        "info": "Every 30 minutes function requests data from *AccuWeather API* - 12 hour hourly forecast.\n\nFetched data are written to Modbus server (registers 1000-1023 for timestamps, registers 1032-1043 for temperatures)\n\n* *Location* - hardcoded to the URL\n* *API key* - hardcoded to the URL\n\n**Out1** writes 24 registers (12 32byte timestamp) `UINT32 UNIX timestamp`\n\n\n**Out2** writes 12 registers (12 16byte temperatures)\n`0x0118 = 280 = 28.0 °C`",
        "x": 200,
        "y": 340,
        "wires": [],
        "icon": "node-red/light.png"
    }
]